const { chromium } = require('playwright');

async function testChartInteraction() {
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 500 // Slow down for visibility
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();
  
  console.log('üéØ Testing Chart Interaction Capabilities...');
  
  try {
    // Navigate to the app
    await page.goto('http://localhost:5174');
    console.log('‚úÖ Loaded trading dashboard');
    
    // Wait for the app to fully load
    await page.waitForSelector('.trading-dashboard-simple', { timeout: 10000 });
    console.log('‚úÖ Dashboard is ready');
    
    // Find the input field in the right panel
    const inputField = await page.locator('input[placeholder*="Connect to send messages"], input[type="text"]').first();
    await inputField.click();
    await page.waitForTimeout(1000);
    
    const messageInput = await page.locator('input[placeholder*="Type"], textarea[placeholder*="Type"], input[type="text"]:not([disabled])').last();
    
    if (await messageInput.count() > 0 && await messageInput.isEnabled()) {
      console.log('üìù Testing chart commands...');
      
      // Test 1: Change to NVDA with weekly timeframe
      console.log('\nüîÑ Test 1: NVDA Weekly Chart');
      await messageInput.fill('Show me the NVDA chart with weekly timeframe');
      await page.keyboard.press('Enter');
      console.log('‚úÖ Sent: "Show me the NVDA chart with weekly timeframe"');
      
      // Wait for response and chart update
      await page.waitForTimeout(5000);
      
      // Check if chart title updated to NVDA
      const chartTitle = await page.locator('.chart-title, .symbol-display, [class*="symbol"]').first();
      if (await chartTitle.count() > 0) {
        const titleText = await chartTitle.textContent();
        if (titleText && titleText.includes('NVDA')) {
          console.log('‚úÖ Chart switched to NVDA!');
        } else {
          console.log('‚ö†Ô∏è Chart title:', titleText);
        }
      }
      
      // Test 2: Switch to Microsoft daily
      console.log('\nüîÑ Test 2: Microsoft Daily Chart');
      await messageInput.fill('Display Microsoft daily chart');
      await page.keyboard.press('Enter');
      console.log('‚úÖ Sent: "Display Microsoft daily chart"');
      
      await page.waitForTimeout(5000);
      
      // Check for MSFT in the interface
      const msftElements = await page.locator('*:has-text("MSFT"), *:has-text("Microsoft")').count();
      if (msftElements > 0) {
        console.log('‚úÖ Found Microsoft/MSFT in interface!');
      }
      
      // Test 3: Complex query with support/resistance
      console.log('\nüîÑ Test 3: Tesla with Technical Levels');
      await messageInput.fill('Show Tesla chart with support and resistance levels');
      await page.keyboard.press('Enter');
      console.log('‚úÖ Sent: "Show Tesla chart with support and resistance levels"');
      
      await page.waitForTimeout(5000);
      
      // Look for TSLA and technical levels in response
      const responseContainer = await page.locator('.agent-conversation, [class*="conversation"], [class*="messages"]').first();
      const responseText = await responseContainer.textContent() || '';
      
      if (responseText.toLowerCase().includes('tsla') || responseText.toLowerCase().includes('tesla')) {
        console.log('‚úÖ Tesla analysis received!');
      }
      
      if (responseText.toLowerCase().includes('support') || responseText.toLowerCase().includes('resistance')) {
        console.log('‚úÖ Technical levels included!');
      }
      
    } else {
      console.log('‚ö†Ô∏è Could not find message input field');
    }
    
    // Take a screenshot of the final state
    await page.screenshot({ path: 'chart_interaction_test.png', fullPage: true });
    console.log('\nüì∏ Screenshot saved as chart_interaction_test.png');
    
    console.log('\n‚ú® Chart interaction test completed!');
    console.log('üìä Summary: Chart commands are now being generated by the agent');
    console.log('    and included in the API response. The frontend should');
    console.log('    automatically parse and execute these commands.');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    await page.screenshot({ path: 'chart_test_error.png', fullPage: true });
    console.log('üì∏ Error screenshot saved as chart_test_error.png');
  } finally {
    await page.waitForTimeout(3000); // Keep browser open for observation
    await browser.close();
  }
}

// Run the test
testChartInteraction().catch(console.error);